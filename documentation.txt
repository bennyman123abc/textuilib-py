################################################################################################

Table of Contents:
1.0: Classes
	1.1: menu
		1.1.1: getName
		1.1.2: getOptions
		1.1.3: displayOptions
		1.1.4: displayName
		1.1.5: displayMenu
		1.1.6: addMenuItem
		1.1.7: clearMenuItems
	1.2: menuItem
	1.3: TypeMismatch

2.0: Functions
	2.1: setHeader
	2.2: displayHeader
	2.3: clear
	2.4: choice
	
################################################################################################

1.0 Classes

* menu - Main class which contains the information for each menu to be displayed correctly
* menuItem - Each item, option, choice, etc. in a menu which the user has to pick from
* TypeMismatch - An exception class for easier to read errors

################################################################################################

1.1 menu

DESCRIPTION: Main class in this library. It contains and passes information for each menu the
user defines

REQUIRES: self, name (str), options (list)

RETURNS: None

USAGE: menu(name, options)

EXAMPLE: menu1 = menu("Test Menu", [["Option 1", "option1"], ["Option 2", "option2"], ["Quit", "quit"]]

EXPLANATION: The menu requires one string and a list that contains more lists (Changed in 2.0).
The lists in the options list require 2 strings. One is returned for the name of the option and the
other is returned as the function of the option so you can run code based on the user's input.

################################################################################################

1.1.1 getName

DESCRIPTION: Returns the name of the menu.

REQUIRES: self

RETURNS: name (str)

USAGE: menu.getName()

EXAMPLE: print menu1.getName()
Would print "Test Menu" assuming menu1's name is Test Menu

EXPLANATION: Returns the menu's name which in 1.0 is stored in a global array (slower). In 2.0
however, it simply returns self.name (faster).

################################################################################################

1.1.2 getOptions
